80、vue中组件之间的通信方式？
回答范例：
1.	组件通信方式大体有以下8种：
•	props
•	$emit/$on
•	$children/$parent
•	$attrs/$listeners
•	ref
•	$root
•	eventbus
•	vuex
2.	根据组件之间关系讨论组件通信最为清晰有效
•	父子组件
o	props
o	$emit/$on
o	$parent / $children
o	ref
o	$attrs / $listeners
•	兄弟组件
o	$parent
o	eventbus
o	vuex
•	跨层级关系
o	provide/inject
o	$root
o	eventbus
o	vuex
81、什么是vue-loader？
Vue-loader 是 Webpack 的加载器模块，它使我们可以用 .vue 文件格式编写单文件组件。单文件组件文件有三个部分，即模板、脚本和样式。 vue-loader 模块允许 webpack 使用单独的加载器模块（例如 SASS 或 SCSS 加载器）提取和处理每个部分。该设置使我们可以使用 .vue 文件无缝编写程序。
vue-loader 模块还允许把静态资源视为模块依赖性，并允许使用 webpack 加载器进行处理。而且还允许在开发过程中进行热重装。
82、什么是 mixin？
Mixins 使我们能够为 Vue 组件编写可插拔和可重用的功能。如果你希望在多个组件之间重用一组组件选项，例如生命周期 hook、方法等，则可以将其编写为 mixin，并在组件中简单地引用它。然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优先于组件自己的 hook 。
83、在开发过程中，如果你的 Vue 程序和后端 API 服务器未在同一主机上运行，该如何代理 API 请求。假设使用 Vue-CLI 3 进行设置？
假设我们有一个运行在 localhost:4040 上的 Node.js 后端服务器。为了确保代理并可以从组件中访问它，可以配置 vue.config.js 文件并包含 devServer 部分，如下所示：
在 vue.config.js 文件中：
module.exports: {
    devServer: {
        proxy: {
            '/api': { 
                target: ‘http://localhost:4040/api’, 
                changeOrigin: true 
            }
        }
    }
}
84、prop 如何指定其类型要求？
通过实现 prop 验证选项，可以为单个 prop 指定类型要求。这对生产没有影响，但是会在开发阶段发出警告，从而帮助开发人员识别传入数据和 prop 的特定类型要求的潜在问题。
配置三个 prop 的例子：
props: {
    accountNumber: {
        type: Number,
        required: true
    },
    name: {
        type: String,
        required: true
   },
   favoriteColors: Array
}
85、什么是异步组件？
当大型程序使用大量组件时，从服务器上同时加载所有组件可能是没有意义的。在这种情况下，Vue 允许我们在需要时定义从服务器异步加载的组件。在声明或注册组件时，Vue 接受提供 Promise 的工厂函数。然后可以在调用该组件时对其进行“解析”。
通过仅加载基本组件并把异步组件的加载推迟到未来的调用时间，可以节省带宽和程序加载时间。
这是一个异步组件的简单示例。
new Vue({
    components: {
        ‘tweet-box’: () => import(‘./components/async/TweetBox’)
    }
}); 
当以这种方式使用时，Webpack 的代码拆分将用于提供此功能。
86、Vuex刷新时数据会消失，那如何解决？为什么还要使用Vuex
原因：
因为store里的数据是保存在运行内存中的,当页面刷新时，页面会重新加载vue实例，store里面的数据就会被重新赋值初始化
一：.利用vuex-persistedstate插件
插件的原理其实也是结合了存储方式,只是统一的配置就不需要手动每次都写存储方法

二：解决思路：
将state的数据保存在localstorage、sessionstorage或cookie中，这样即可保证页面刷新数据不丢失且易于读取。
1.	localStorage: localStorage的生命周期是永久的，关闭页面或浏览器之后localStorage中的数据也不会消失。localStorage除非主动删除数据，否则数据永远不会消失。
2.	sessionStorage:sessionStorage的生命周期是在仅在当前会话下有效。sessionStorage引入了一个“浏览器窗口”的概念，sessionStorage是在同源的窗口中始终存在的数据。只要这个浏览器窗口没有关闭，即使刷新页面或者进入同源另一个页面，数据依然存在。但是sessionStorage在关闭了浏览器窗口后就会被销毁。同时独立的打开同一个窗口同一个页面，sessionStorage也是不一样的。
3.	cookie:cookie生命期为只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 存放数据大小为4K左右,有个数限制（各浏览器不同），一般不能超过20个。缺点是不能储存大数据且不易读取。
由于vue是单页面应用，操作都是在一个页面跳转路由，因此sessionStorage较为合适,原因如下：
1.	sessionStorage可以保证打开页面时sessionStorage的数据为空；
2.	每次打开页面localStorage存储着上一次打开页面的数据，因此需要清空之前的数据。
vuex的数据在每次页面刷新时丢失，是否可以在页面刷新前再将数据存储到sessionstorage中呢，是可以的，beforeunload事件可以在页面刷新前触发，但是在每个页面中监听beforeunload事件感觉也不太合适，那么最好的监听该事件的地方就在app.vue中。
1.	在app.vue的created方法中读取sessionstorage中的数据存储在store中，此时用vuex.store的replaceState方法，替换store的根状态
2.	在beforeunload方法中将store.state存储到sessionstorage中。
vuex中state数据的修改必须通过mutation方法进行修改，因此mutation修改state的同时需要修改sessionstorage,问题倒是可以解决但是感觉很麻烦，state中有很多数据，很多mutation修改state就要很多次sessionstorage进行修改，既然如此直接用sessionstorage解决不就行了，为何还要用vuex多此一举呢？
　　vuex可以实现数据响应，而sessionstorage是不可以的，我们使用vuex 的主要目的是为了各个组件之间的传参，通过数据改变视图。而sessionstorage是做不到这一点的。

87、Vuex响应式原理
1、在vuex的state里面，每一个对象中的属性（key值），都会有一个Dep[1，2 ]观察者，当这个key变化时，dep就会去看它里面的数组包含了哪些地方用到了这个key值，然后更新他们。
State:{
Name:’bit’ => Dep[ 组件一，组件二 ] 组件一，二，用到了这个值
}
2、在mutations同步和actions异步中，如果异步操作不放在actions中，就会导致devtools浏览器插件中的记录state快照失效，
88、ES6经典面试题
1.箭头函数有哪些特性
1、箭头函数是匿名函数，不绑定自己的this,arguments,super,new.target
2、箭头函数会捕获其所在上下文的this值，作为自己的this值，在使用call/apply绑定时，相当于只是传入了参数，对this没有影响
3、箭头函数不绑定arguments，取而代之用rest参数…解决
4、箭头函数当方法使用的时候，没有定义this绑定
5、箭头函数不能作为构造函数，和 new 一起用就会抛出错误
6、箭头函数没有原型属性
7、不能简单返回对象字面量
2.实现数组过滤重复
  Let s = [...new Set(arr)]
3.使用json方式实现深拷贝
let arr2 = JSON.parse(JSON.stringify(arr1));
4.ES6模板字符串有哪些好处
 a. 在ES5拼接的时候，如果结构需要换行，必须使用转义符；在ES6中，使用模板字符串，直接使用html结构即可
b. 在ES5中，单引号和双引号必须注意嵌套问题，在ES6中，就不需要考虑；
c. 模板字符串中，可以写js语句
d. 方便简洁，不容易出错；
5.关于对象扩展的属性简写和属性名表达方式写法，请各举一个例子
1. 属性的简写：必须属性名和变量名相同
3. 属性表达式：[]里面可以是变量，字符串，数字，表达式
注意：如果对象的属性是数字，不可以使用点进行访问
属性名简写：
var title = 'offc';
var size = 10;
var obj = {
title,
size,
};
属性名表达式：
var title = 'offc';
obj[title] = '简书';

6.手写promise
var p = new Promise((resolve,reject)={
if(1){
resolve(‘成功’)
}
else{
reject(‘失败’);
}
})
p.then((res)=>{}).catch((err)=>{})
7.用class定义一个类
class Aniaml{
static Type = ‘动物’
constructor(newName){
this.name = newName
}
eat(){conosle.log(‘吃东西’)}
static sayHi(){
console.log(‘大家好’)
}
}

8.class实现继承
class Tigger extends Animal{
constructor(props){
super(props)
}
}
9.谈一下对async。。。。await的理解
async...await是基于promise的generator语法糖，它用来等待promise的执行结果，常规函数使用await没有效果；async修饰的函数内部return不会得到预期的结果，会得到一个promise对象；await等待的promise结果是resolve状态的内容，reject状态的内容需要使用try...catch获取，await关键字必须要出现在async修饰的函数中，否则报错。
10.ES6中的symbol类型有什么作用
ES6新增了Symbol数据类型，它用来生成一个独一无二的值，它Symbol数据常用来给对象属性赋值，让对象属性具备唯一性，不容易被覆盖。
11.class类中的super有哪些用法
Super在类中有两种用法，一个是super方法，一个是super对象；super方法只能出现在constructor方法中，super对象一般出现在子类覆盖父类的方法中。
12.静态和成员的区别
静态的变量或方法归类所有，全局独一份，成员的变量或方法归对象所有，每次实例化对象成员方法和成员变量就会得到一份拷贝；对于一些通用性的属性或方法，可以考虑设置为静态。

13.谈一体你多promise的理解
Promise用来解决异步回调问题，由于js是单线程的，很多异步操作都是依靠回调方法实现的，这种做法在逻辑比较复杂的回调嵌套中会相当复杂；也叫做回调地狱；promise用来将这种繁杂的做法简化，让程序更具备可读性，可维护性；promise内部有三种状态，pedding，fulfilled，rejected；pedding表示程序正在执行但未得到结果，即异步操作没有执行完毕，fulfilled表示程序执行完毕，且执行成功，rejected表示执行完毕但失败；这里的成功和失败都是逻辑意义上的；并非是要报错。其实，promise和回调函数一样，都是要解决数据的传递和消息发送问题，promise中的then一般对应成功后的数据处理，catch一般对应失败后的数据处理。Promise状态一旦确定，就不会再次发生改变
14.深拷贝的原理
Js的深拷贝发生在对象的赋值上，对象赋值的时候仅仅是一个引用赋值，也就是说两个不同变量名指向的是同一份内存空间；基本数据类型则不存在这样的行为；要完成对象的深拷贝需要使用递归遍历所有对象的属性进行赋值，也可以使用JSON.stringfy和JSON.parse操作。

15.set和map的区别
Set是一种类似数组的集合类型，它与数组不同的是，不允许存在重复数据；常用操作方法有：add,delete,has,clear等；遍历使用forEach；
Map是一种类似对象的集合类型，它与对象不同的是，key可以接受对象类型，常用的操作方法有：set,get,has,delete等；遍历使用forEach
16.node的特点是什么
1）它是一个Javascript运行环境
2）依赖于Chrome V8引擎进行代码解释
3）事件驱动
4）非阻塞I/O
5）轻量、可伸缩，适于实时数据交互应用
6）单进程，单线程

17.module.exports和exports的区别，请用代码示范
Exports和module.exports的区别：
1）exports相当于在js文件的首行写了let exports = module.exports;（但是实际情况不需要写，否则报错）
2）exports不可以直接赋值，如果直接赋值相当于与module.exports切断了联系，没有了导出功能；
3）如果exports和module.exports同时导出，exports就失去了导出的功能；
4）注意点：module.exports只使用一次即可，多个变量输出的时候，可以使用对象的形式
18.MIME类型有什么作用
MIME的全称是Multipurpose Internet Mail Extensions，即多用途互联网邮件扩展类型。这是HTTP协议中用来定义文档性质及格式的标准。服务器通过MIME告知响应内容类型，而浏览器则通过MIME类型来确定如何处理文档。
常见MIME类型：
application/octet-stream?未知的应用程序文件
application/json?json数据
text/plain未知的文本文件（纯文本文件），浏览器会认为这是可以直接显示的
注:?浏览器分辨文件是基于MIME的，而不会把文件打开查看是否是其他类型，例如用link链接了一个标记为text/plain的文件，就算此文件是css文件，就算其后缀是.css,浏览器依旧不认
text/css?css文件
text/html?HTML文件
image/gif?gif文件
常见的还有image/jpeg、image/png、image/svg
很多浏览器支持icon image/x-icon

let和var的区别
1）let是块作用域，var是函数作用域
2）let没有变量声明提升，var有声明提升
3）存在暂时性死区（TDZ），暂时性死区所指的问题基本都是 先声明后使用的问题
4）在let声明变量所在的作用域，不能重复声明同名变量

20.iterator的作用是什么，怎么布置iterator接口。
1、统一数据结构（数组，对象，map，set，数组包对象，对象包数组）的遍历方式
2、在数据结构上部署iterator接口:所谓的部署接口表现形式为，给对象或数组等集合增加iterator属性，属性的内容是一个根据iterator接口规范自行实现的方法
21cookie和session的区别
session是区别于数据库存在的一种服务器临时存储技术, 它主要存储一些无需持久化的数据, 比如临时的登录状态信息等
cookie是存在于浏览器上的一种浏览器本地存储的方式, 同域名下的cookie不同标签页可以共享, 默认过期时间是浏览器关闭时, 而且在进行http请求时, 会自动带上浏览器全部的cookie发给后台, 后台也可以获取cookie, 设置可以在响应时, 想浏览器中设置cookie。
1、Link和@import引入样式区别？
Link属于html，会同步加载，js可以动态改路径
@import属于css，会最后加载，不兼容IE5下
2、选择器
id选择器 #header
class选择器 .container
伪类选择器 ::after/:hover
属性选择器 [type='input']
兄弟选择器 +
后代选择器 >
通配符 *
3、BFC的特性（作用）
1.	同属于一个BFC的两个块级盒子，在垂直方向上会发生margin重叠。
给其中一个盒子放入另外一个BFC中，解决margin重叠
2.	浮动元素是一个单独的BFC。两个BFC之间不会影响。
解决浮动元素浮在其它元素表面上的问题。一般用于图文环绕。
3.	计算BFC的高度时，浮动元素也计算在内。
给浮元素触发BFC。解决高度塌陷问题。

4、 简要描述下JS有哪些内置的对象
•	时间对象Date
•	字符串对象String
•	数学对象Math
•	数值对象Number
•	数组对象Array
•	函数对象Function
•	函数参数集合arguments
•	布尔对象Boolean
•	错误对象Error
•	基础对象Object

5、::before和:after中单冒号和双冒号的区别是什么，这两个伪元素有什么作用？
::是css3为了区分伪类和伪元素新增的
::伪元素
:伪类
::before在元素内部的最开头添加元素或者content
::after与之相反，在元素内部的最结尾
<a class="demo" href="https://www.xunlei.com/" title="精彩，一下就有">精彩，一下就有</a>

.demo:after{
	content: "↗"
}
结果： 
6、闭包的理解
1.	闭包有三个特性：
2.	1.函数嵌套函数 
3.	2.函数内部可以引用外部的参数和变量 
4.	3.参数和变量不会被垃圾回收机制回收
5.	首先，在函数外部是无法访问函数内部的变量的。
6.	为了解决上述问题，则引入了闭包。简单来说就是为了能访问函数A内部的变量值，需要在函数A中定义一个其他的函数B，并且将B返回给外部变量，那么外部变量就可以通过B来访问到函数A中的变量了。这就是闭包。
7.	闭包方便访问函数内部的变量，但同时也会导致原来函数A中的变量无法及时销毁，导致内存占用过高。并且如果没有及时销毁的话，也存在内存泄露问题。
闭包：在局部作用域引用上层作用域（非全局）的变量
优点：防止变量污染作用域
缺点：不释放则会导致内存泄漏
function a(){
	var b = 1;
	var c = 2;
	// 这个函数就是个闭包，可以访问外层 a 函数的变量
	return function(){
		var d = 3;
		return b + c + d;
	}
}

var e = a();
console.log(e());
7、js中0.1+0.2=0.100000000002的原因？？？
简单来说就是js中采用IEEE754的双精度标准，因为精度不足导致的问题，比如二进制表示0.1时这这样表示1001100110011...(0011无线循环)，那么这些循环的数字被js裁剪后，就会出现精度丢失的问题，也就造成了0.1不再是 0.1 了，而是变成了 0.100000000000000002
8、 说说bind、call、apply的区别？并手写实现一个bind的方法
其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！
先看明白下面：
例 1
 
obj.objAge;  // 17
obj.myFun()  // 小张年龄 undefined
例 2
 
shows()  // 盲僧　
比较一下这两者 this 的差别，第一个打印里面的 this 指向 obj，第二个全局声明的 shows() 函数 this 是 window ；
1，call()、apply()、bind() 都是用来重定义 this 这个对象的！
如：
 
obj.myFun.call(db)；　　　　// 德玛年龄 99
obj.myFun.apply(db);　　　 // 德玛年龄 99
obj.myFun.bind(db)();　　　// 德玛年龄 99
以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！
由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。
2，对比call 、bind 、 apply 传参情况下
 
　
obj.myFun.call(db,'成都','上海')；　　　　 // 德玛 年龄 99  来自 成都去往上海
obj.myFun.apply(db,['成都','上海']);      // 德玛 年龄 99  来自 成都去往上海  
obj.myFun.bind(db,'成都','上海')();       // 德玛 年龄 99  来自 成都去往上海
obj.myFun.bind(db,['成都','上海'])();　　 // 德玛 年龄 99  来自 成都, 上海去往 undefined
　　
微妙的差距！
从上面四个结果不难看出:
call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：
call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。
apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。
bind 除了返回是函数以外，它 的参数和 call 一样。
当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！

9、在浏览器中输入url到页面显示出来的过程发生了什么？
（1）DNS解析得到ip，通过ip向服务器发起tcp链接，发送请求，服务器返回数据，浏览器解析渲染显示，关闭连接。（三次握手）
•	（2）用户在浏览器中输入网址后，浏览器会先对输入的地址进行解析。比如用的协议 http 还是 https
•	之后会根据域名进行 IP 的寻址
o	寻址先从缓存开始，如 host
o	之后再访问 DNS 服务器，一层一层直至访问到根服务器
o	服务器再把 IP 告诉客户端
•	客户端拿到 IP 后发起请求
o	与服务器进行 HTTP 连接建立（3 次握手）
o	  小明（客户端）：How are you?(SYN报文)
o	  小红（服务器）：i am fine,thank you(Ack,对问题的确认。）
o	                and you?(SYN)
o	  小明（客户端）：me too.(Ack报文)
o	  一番礼貌之后，联系已经建立。可以进行家长里短的交谈了，也就是可以发送数据了。
•	建立成功后服务器返回数据，浏览器进行渲染
o	DOM 树构建、CSSOM 树的构建、JavaScript 资源下载
	CSS 的重排重绘，CSSOM 与 DOM 一起进行绘制
	JavaScript 资源的阻塞
•	渲染出页面
•	关闭TCP连接，过程有四次挥手。
10、rgba()和opacity这两个的透明效果有什么区别呢？
1.opacity 是属性，rgba()是函数，计算之后是个属性值；
2.opacity 作用于元素和元素的内容，内容会继承元素的透明度，取值0-1；
3.rgba() 一般作为背景色 background-color 或者颜色 color 的属性值，透明度由其中的 alpha 值生效，取值0-1；
11、请描述css的权重计算规则
权重值计算
选择器	案例	权重值
!important	!important	Infinity
内联样式	style=".."	1000
ID	#id	100
class	.class	10
属性	[type='text']	10
伪类	:hover	10
标签	p	1
伪元素	::first-line	1
相邻选择器、子代选择器、通配符	* > +	0

12、BOM指 浏览器对象模型
 DOM指 文档对象模型
13、谈一谈你知道的前端性能优化方案有哪些？
整理如下
客户端优化
•	减少http请求次数：CSS Sprites, JS、CSS源码压缩、图片大小控制合适；网页Gzip，CDN托管，data缓存 ，图片服务器。
•	使用CSS雪碧图（CSS Sprites）CSS Sprites一句话：将多个图片合并到一张单独的图片，这样就大大减少了页面中图片的HTTP请求。
•	减少DOM操作次数，优化javascript性能。
•	少用全局变量、减少DOM操作、缓存DOM节点查找的结果。减少IO读取操作。
•	延迟加载 | 延迟渲染
•	图片预加载，将样式表放在顶部，将脚本放在底部 加上时间戳。
•	避免在页面的主体布局中使用table，table要等其中的内容完全下载之后才会显示出来，显示比div+css布局慢。
服务端优化
•	尽量减少响应的体积，比如用 gzip 压缩，优化图片字节数，压缩 css 和 js；或加快文件读取速度，优化服务端的缓存策略。
•	客户端优化 dom、css 和 js 的代码和加载顺序；或进行服务器端渲染，减轻客户端渲染的压力。
•	优化网络路由，比如增加 CDN 缓存；或增加并发处理能力，比如服务端设置多个域名，客户端使用多个域名同时请求资源，增加并发量。




14、写出主流浏览器内核私有属性的css前缀
现在用 scss 等预处理器用多了，前缀确实不怎么关注了。
-webkit- (谷歌, Safari, 新版 Opera 浏览器等)
-moz- (火狐浏览器)
-o- (旧版 Opera 浏览器等)
-ms- (IE 浏览器 和 Edge 浏览器)
15、HTML与XHTML二者有不同
•	XHTML 元素必须被正确地嵌套。
•	XHTML 元素必须被关闭。
•	标签名必须用小写字母。
•	XHTML 文档必须拥有根元素。
16、html5哪些标签可以优化SEO?
首先明确SEO是什么，做SEO主要是方便网站爬虫准确的抓取到网站中关键信息从而达到优化效果。多使用语义化标签
跟标签语义化有关，从上往下：
meta
title
nav
header
main
article
section
aside
footer
figure
picture
time
video
audio
17、说说你对eval的理解
eval() 相当于一个小型的js解析器，接受一个字符串，可以把字符串解析成js代码并执行，所以有很有大的安全隐患，并且写进去的代码都是字符串，不利于维护，使用它执行代码性能也会大大折扣，所以正常情况下不建议使用。

18、说说你对cookie和session的理解#140

区别：
安全性：cookie保存在客户端，可在本地查看修改，安全性不高。session的用户信息保存在服务器端，发给客户端的只是一个用户id，相对更安全
限制：cookie有大小和数量限制，session没有大小限制，只有时间限制

19、说说你对NodeJs的理解及用途

Node.js 应用场景的7个部分。
1）初衷，server端，成了前端开发的基础设施（npm）
2）命令行辅助工具，甚至可以是运维
3）移动端：cordova，pc端：nw.js和electron
4）组件化，构建，代理
5）架构，前后端分离、api proxy
6）性能优化、反爬虫与爬虫
7) 全栈最便捷之路
###Node核心：异步
20、为什么会有跨域问题？怎么解决跨域？

浏览器为了安全，产生了同源策略，协议、域名、端口有一个不同，就会产生跨域。跨域方式有jsonp,服务器代理方式，cors，domain改变主域相同，postmessage也可以
1、jsonp他为什么能解决跨域呢，是因为Web 页面上调用 js 文件不受浏览器同源策略的影响，所以通过 Script 便签可以进行跨域的请求
2、CORS 是一个 W3C 标准，全称是"跨域资源共享"（Cross-origin resource sharing）它允许浏览器向跨源服务器，发出 XMLHttpRequest 请求，从而克服了 ajax 只能同源使用的限制。
3、服务器代理，顾名思义，当你需要有跨域的请求操作时发送请求给后端，让后端帮你代为请求，然后最后将获取的结果发送给你。
优缺点：
1.	JSONP
优点是可以兼容老浏览器，缺点是只能发送GET请求
2.	CORS
优点简单方便，支持post请求，缺点是需要后端的配合,不支持老版浏览器。。
3.	Server Proxy
优点是前端正常发送ajax请求，缺点是后端会二次请求。

21、怎么才能让图文不可复制？

-webkit-user-select: none;
-ms-user-select: none;
-moz-user-select: none;
-khtml-user-select: none;
user-select: none;

22、你对事件循环有了解吗？说说看！
单线程模型
JS 引擎有多个线程，但引擎同时只执行一个任务，其他任务都必须在后面排队，即引擎只在一个线程上运行。这个线程称为主线程。
事件循环机制
JS 本身并不慢，慢的是读写外部数据，比如等待 Ajax 请求返回结果。如果等着 Ajax 返回结果出来，再往下执行，就会耗费很长的时间。所以 JS 设计了一种机制，CPU 可以不管 IO 操作，而是挂起该任务，先执行后面的任务，等到 IO 操作返回了结果，再继续执行挂起的任务。
同步任务执行完后，引擎一遍又一遍检查那些挂起来的异步任务是否满足进入主线程的条件。这种循环检查的机制，就叫做事件循环机制。
任务队列
JS 引擎运行时，除了一个正在运行的主线程，还提供一个或多个任务队列，里面是各种被挂起的异步任务。首先，主线程会去执行所有的同步任务，等到同步任务全部执行完，就会去看任务队列里面的异步任务，如果满足条件，那么异步任务就重新进入主线程开始执行，这时它就会变成同步任务。等到执行完，下一个异步任务再进入主线程开始执行。一旦任务队列清空，程序就结束执行。
同步任务和异步任务
程序里面所有的任务可以分成两类：
•	同步任务：没有被引擎挂起，在主线程上排队执行的任务。只有前一个任务执行完毕，才能执行后一个任务。
•	异步任务：被引擎挂起，不进入主线程，而进入任务队列的任务。只有引擎认为某个异步任务可以执行了，该任务才会进入主线程执行。排在异步任务后面的代码，不用等待异步任务结束会马上运行。
23、说说你对WEB标准和W3C的理解与认识？
网页主要由三个部分组成，表现、结构和行为。
我理解的就是：
html是名词--表现
css是形容词--结构
javascript是动词--行为
以上这三个东西就形成了一个完整的网页，但是js改变时，可以会造成css和html的混乱，让这三个的界限不是那么清晰。
这个时候，web标准就出来了，web标准一般是将该三部分独立分开，使其更具有模块化。
W3C对web标准提出了规范化的要求，也就是在实际编程中的一些代码规范：包含如下几点
1.对于结构要求：（标签规范可以提高搜索引擎对页面的抓取效率，对SEO很有帮助）
标签字母要小写
标签要闭合
标签不允许随意嵌套
2.对于css和js来说
尽量使用外链css样式表和js脚本。是结构、表现和行为分为三块，符合规范。同时提高页面渲染速度，提高用户的体验。
样式尽量少用行间样式表，使结构与表现分离，标签的id和class等属性命名要做到见文知义，标签越少，加载越快，用户体验提高，代码维护简单，便于改版
这里顺便解释下什么是web标签语义化，即用正确的标签做正确的事情。
比如：
W3C组织意识到了之前HTML版本的不足，推出的HTML5进一步推进了Web语义化发展，采用了诸如footer、section等语义化标签，弥补了采用id="footer"或者class="footer"形式的不足，以更好的推动Web的发展。
24、第50天 说说你对http、https的理解
1.	从是否需要证书方面来看：https协议需要到ca申请证书，一般免费证书很少，需要交费。
2.	从是否安全方面来看：http是超文本传输协议，信息是明文传输（无法加密），https则是具有安全性的ssl加密传输协议。
3.	从写法、端口号来看：http和https使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。
4.	从OSI网络模型中来看：http的连接很简单，是无状态的(HTTP工作于应用层)；https协议是由SSL+HTTP协议构建的可进行加密传输、身份认证的网络协议、比http协议安全(HTTPS的安全传输机制工作在传输层)




25、列举CSS优化、提高性能的方法？
加载性能
1.	压缩CSS
2.	通过link方式加载，而不是@import
3.	复合属性其实分开写，执行效率更高，因为CSS最终也还是要去解析如 margin-left: left;
选择器性能
1.	尽量少的使用嵌套，可以采用BEM的方式来解决命名冲突
2.	尽量少甚至是不使用标签选择器，这个性能实在是差，同样的还有*选择器
3.	利用继承，减少代码量
渲染性能
1.	慎重使用高性能属性：浮动、定位；
2.	尽量减少页面重排、重绘；
3.	css雪碧图
4.	自定义web字体，尽量少用
5.	尽量减少使用昂贵属性，如box-shadow/border-radius/filter/透明度/:nth-child等
6.	使用transform来变换而不是宽高等会造成重绘的属性



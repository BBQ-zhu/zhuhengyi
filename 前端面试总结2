47、vue-router实现原理
1.vue的单页面应用是基于路由和组件的，路由用于设定访问路径，并将路径和组件映射起来
2.传统的页面应用，是用一些超链接来实现页面切换和跳转的。
在vue-router单页面应用中，则是路径之间的切换，也就是组件的切换。路由模块的本质 就是建立起url和页面之间的映射关系。
至于为啥不能用a标签，这是因为用Vue做的都是单页应用，就相当于只有一个主的index.html页面，所以你写的标签是不起作用的，必须使用vue-router来进行管理。
48、详述虚拟DOM
1、state数据
2、JSX模板
3、数据 + 模板 生成虚拟DOM(虚拟DOM就是一个JS对象，用它来描述真实DOM)（损耗一点性能）
虚拟DOM：['div’, {id: 'abc’}, ['span’, '’, ‘hello world’]]
4、用虚拟DOM的结构生成真实的DOM -> 视图显示
真实DOM：
5、state发生了变化
6、数据 + 模板 生成新的虚拟DOM：['div’, {id: 'abc’}, ['span’, '’, ‘hi world’]]（极大提升性能）
7、比较原始虚拟DOM和新的虚拟DOM的区别，找到的区别是span中的内容发生了变化（极大提升了性能）
8、直接操作DOM，改变span中的内容
总结：
减少了真实DOM的创建及对比，创建都是JS对象，对比的也都是JS的对象，在JS底层实现了极大的性能飞越
组件生成流程：
JSX -> JS对象(虚拟DOM) -> 真实的DOM
用React.createElement改写JSX模板：
JSX：return
{ item }

JSX -> JS对象(虚拟DOM) -> 真实的DOM
React.createElement('div’, {}, React.createElement('span’, {}, ‘item’))
JSX -> createElement -> JS对象(虚拟DOM) -> 真实的DOM
虚拟DOM优点：
1、性能提升了
2、它使得跨端应用得以实现，Ract Native
React可以写原生应用了，得益于React中的虚拟DOM，如果没有虚拟DOM是不能写原生应用的。原生系统是不支持DOM不存在DOm这个概念的，但是支持虚拟DOM（虚拟DOM就是一个JS对象）；虚拟DOM可以在浏览器端被解析为真实的DOM，在原生端可以被解析原生所支持的组件等格式
49、原型链的解释
 
// 原型链继承关系
    function fnArr(){
        fnArr.prototype.name = '原型链名字'
    }
    var a = new fnArr()
    console.log(a.name)
    // a的隐性属性继承fnArr的显性属性，形成一条原型链
    console.log(a.__proto__ === fnArr.prototype) //true

    var obj = new Object();
    obj.name = 'Kevin'
    console.log(obj.name) // Kevin

    // 原型链最终值为null
    console.log(Object.prototype.__proto__ === null) // true

    // JavaScript 默认并不会复制对象的属性，相反，JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些
50、原型链的解释
    var person = function(){    
        //变量作用域为函数内部，外部无法访问    
        var name = "default";       
        return {    
        getName : function(){    
            return name;    
        },    
        setName : function(newName){    
            name = newName;    
        }    
        }    
    }();    
    console.log(person.name);//直接访问，结果为undefined    
    console.log(person.getName());    //default
    person.setName("a");    
    console.log(person.getName());    //a
51、vue 如何监听数组变化
•	Object.defineProperty 不能监听数组变化
•	重新定义原型，重写push pop 等方法，实现监听
•	Proxy(代理) 可以原生支持监听数组变化
52、eval( )是做什么的？
它的功能是把对应的字符串解析成JS代码并运行；
 应该避免使用eval，不安全，非常耗性能（2次，一次解析成js语句，一次执行）。
 由JSON字符串转换为JSON对象的时候可以用eval，var obj =eval('('+ str +')');
53、JavaScript的垃圾回收机制
内存泄漏
js的垃圾回收机制是为了防止内存泄漏而设计的，内存泄漏的含义就是某块内存不再被需要或无法被引用或引用链从根访问时，这块内存却还存在着。
垃圾回收机制
垃圾回收机制就是间歇性的不定期去寻找不再使用的变量，并释放掉它们所指向的内存。
JavaScript中内存管理的主要概念就是可达性。
简单地说，可达性 就是那种以某种方式可访问或可被引用的值，它们被保证存储在内存中。
当然，如果引用或引用链可以从根访问到任何其他值，则会认为该值是可访问的。例如，如果局部变量中的 A 对象具有引用到 B 对象的属性，则 A,B 属性皆被视为具有可达性。
但是有一组对象持有固有的可达值，所以就无法被回收删除，例如
全局变量
本地函数的局部变量和参数
当前嵌套调用链上的其他函数的变量和参数
还有其他的，内部的
这些值统称为 根
所以在js中不被引用的都是垃圾。但是如果几个对象互相引用，但是根无法访问，那么它们也是垃圾！
下面是一些内存管理的例子
最简单的例子
let user = {
  name: "John"
};
这里将一个键name值John的对象赋值给user
如果user的值被覆盖，也就是引用丢失(比如将user = ‘name’)
现在John就会变成不可达的状态，无法访问无法引用，垃圾回收器将丢弃John对象数据并释放内存
4、垃圾回收策略：标记清除(较为常用)和引用计数。

标记清除：

　　定义和用法：当变量进入环境时，将变量标记"进入环境"，当变量离开环境时，标记为："离开环境"。某一个时刻，垃圾回收器会过滤掉环境中的变量，以及被环境变量引用的变量，剩下的就是被视为准备回收的变量。

　　到目前为止，IE、Firefox、Opera、Chrome、Safari的js实现使用的都是标记清除的垃圾回收策略或类似的策略，只不过垃圾收集的时间间隔互不相同。

引用计数：

　　定义和用法：引用计数是跟踪记录每个值被引用的次数。

　　基本原理：就是变量的引用次数，被引用一次则加1，当这个引用计数为0时，被视为准备回收的对象。
54、清楚浮动的方法？
1.父级div定义 height
原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。
优点：简单、代码少、容易掌握
缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题
2，结尾处加空div标签 clear:both
原理：添加一个空div，利用css提高的clear:both清除浮动，让父级div能自动获取到高度
优点：简单、代码少、浏览器支持好、不容易出现怪问题
缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div，让人感觉很不好
3，父级div定义 伪类:after 和 zoom
原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题
优点：浏览器支持好、不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）
缺点：代码多、不少初学者不理解原理，要两句代码结合使用才能让主流浏览器都支持
4，父级div定义 overflow:hidden
原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度
优点：简单、代码少、浏览器支持好
缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。
55、介绍一下box-sizing属性
兼容问题 
首先，box-sizing属性在FireFox中存在兼容问题，所以需要使用-moz-box-sizing做一下兼容。

属性值
· box-sizing：content-box
· box-sizing：border-box
· box-sizing：inherit
content-box
实际宽度 = width + margin + padding
· 这是box-sizing的默认属性值
· 是CSS2.1中规定的宽度高度的显示行为
· 在CSS中定义的宽度和高度就对应到元素的内容框
· 在CSS中定义的宽度和高度之外绘制元素的内边距和边框

border-box
实际宽度 = width (margin + padding 会计算在内)
· 在CSS中微元素设定的宽度和高度就决定了元素的边框盒
· 即为元素在设置内边距和边框是在已经设定好的宽度和高度之内进行绘制
· CSS中设定的宽度和高度减去边框和内间距才能得到元素内容所占的实际宽度和高度

56、new操作符到底到了什么
1. var Func=function(){  

2. };  

3. var func=new Func ();  

new共经过了4几个阶段

1、创建一个空对象

[javascript] view plain copy

1. varobj=new Object();  

2、设置原型链

[javascript] view plain copy

1. obj.__proto__= Func.prototype;  
3、让Func中的this指向obj，并执行Func的函数体。
1. var result =Func.call(obj);  
4、判断Func的返回值类型：
如果是值类型，返回obj。如果是引用类型，就返回这个引用类型的对象。
1. if (typeof(result) == "object"){  
2.   func=result;  
3. }  
4. else{  
5.     func=obj;;  
6. }  
57、类数组与数组的区别？
类数组:
1）拥有length属性，其它属性（索引）为非负整数（对象中的索引会被当做字符串来处理）;
2）不具有数组所具有的方法；
类数组是一个普通对象，而真实的数组是Array类型。
常见的类数组有: 函数的参数 arugments, DOM 对象列表(比如通过 document.querySelectorAll 得到的列表), jQuery 对象 (比如 $("div")).
类数组可以转换为数组:
//第一种方法
Array.prototype.slice.call(arrayLike, start);
//第二种方法
[...arrayLike];
//第三种方法:
Array.from(arrayLike);
58、防抖和节流的区别是什么？防抖和节流的实现？
防抖(debounce): n秒内函数只会执行一次，如果n秒内高频事件再次被触发，则重新计算时间
防抖的应用场景:
•	每次 resize/scroll 触发统计事件
•	文本输入的验证（连续输入文字后发送 AJAX 请求进行验证，验证一次就好）
节流(throttle): 高频事件在规定时间内只会执行一次，执行一次后，只有大于设定的执行周期后才会执行第二次。
函数节流的应用场景有:
•	DOM 元素的拖拽功能实现（mousemove）
•	射击游戏的 mousedown/keydown 事件（单位时间只能发射一颗子弹）
•	计算鼠标移动的距离（mousemove）
•	Canvas 模拟画板功能（mousemove）
•	搜索联想（keyup）
•	监听滚动事件判断是否到页面底部自动加载更多：给 scroll 加了 debounce 后，只有用户停止滚动后，才会判断是否到了页面底部；如果是 throttle 的话，只要页面滚动就会间隔一段时间判断一次
59、为什么0.1+0.2 ！= 0.3？
是因为在进制转换和进阶运算的过程中出现精度损失
1.进制转换
0.1和0.2转换成二进制后会无限循环
0.1 -> 0.0001100110011001...(无限循环)
0.2 -> 0.0011001100110011...(无限循环)
60、CSS动画（transition、animation）animation中的关键帧怎么设置
Transform：大小、位置、颜色、变形等等这些属性。（:hover :focus :checked 媒体查询触发 JavaScript触发。）
Transition：时间 效果 延迟
•	transition-property：规定对哪个属性进行过渡。
•	transition-duration：定义过渡的时间，默认是0。
•	transition-timing-function：定义过渡动画的缓动效果，如淡入、淡出等。
•	linear 规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。
•	ease（默认值）规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。
•	ease-in 规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。
•	ease-out 规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。
•	ease-in-out 规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。
•	cubic-bezier(n,n,n,n) 在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。
•	transition-delay：规定过渡效果的延迟时间，即在过了这个时间后才开始动画，默认是0。
注意：单纯的代码不会触发任何过渡操作，需要通过用户的行为（如点击，悬浮等）触发。可触发的方式有：:hover :focus :checked 媒体查询触发 JavaScript触发。
关键帧动画
animation属性将这些状态一次性赋给该元素。
第一步：通过类似Flash动画中的帧来声明一个动画。
关键帧动画的定义方式也比较特殊，它使用了一个关键字 @keyframes 来定义动画。具体格式为：
@keyframes 动画名称 {    时间点 {元素状态}    时间点 {元素状态}    …}
一般来说，0%和100%这两个关键帧是必须要定义的。0%可以由from代替，100%可以由to代替。
第二步：在目标元素的样式声明中使用animation属性调用关键帧声明的动画。
现在我们知道了怎么去定义一个关键帧动画了，那怎么去实现这个动画呢？其实很简单，只要把这个动画绑定到某个要进行动画的元素上就行了。把动画绑定到元素上，我们可以使用animation属性。
可配置的参数有：
•	animation-name：none为默认值，将没有任何动画效果，其可以用来覆盖任何动画。
•	animation-duration：默认值为0s，意味着动画周期为0s，也就是没有任何动画效果。
•	animation-timing-function：与transition-timing-function一样。
•	animation-delay：在开始执行动画时需要等待的时间。
•	animation-iteration-count：定义动画的播放次数，默认为1，如果为infinite，则无限次循环播放。
•	animation-direction：默认为nomal，每次循环都是向前播放，（0-100）。另一个值为alternate，动画播放为偶数次则向前播放，如果为基数词就反方向播放。
•	animation-state：默认为running，播放，paused，暂停。
•	animation-fill-mode：定义动画开始之前和结束之后发生的操作。
•	none（默认值），动画结束时回到动画没开始时的状态；
•	forwards，动画结束后继续应用最后关键帧的位置，即保存在结束状态；
•	backwards，让动画回到第一帧的状态；
•	both：轮流应用forwards和backwards规则；
注意：只要把定义好的动画绑定到元素上，就能实现关键帧动画了，而不是像第一种过渡动画那样，需要一个状态的改变才能触发动画。
.anima:hover{
            animation:1s changeBg;
        }
        @keyframes changeBg {
            0%{
                background:green
            }
            50%{
                background:red;
            }
            100%{
                background: green;
            }
        }
61、flex布局的属性
http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html
62、xss预防
输入内容：关键字过滤，检测，以及转码（MD5）
63、ajax原理
Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是从服务器获得请求数据。要清楚这个过程和原理，我们必须对 XMLHttpRequest有所了解。
XmlHttpRequest对象它的属性有：
  　　onreadystatechange  每次状态改变所触发事件的事件处理程序。
  　　responseText     从服务器进程返回数据的字符串形式。
  　　responseXML    从服务器进程返回的DOM兼容的文档数据对象。
  　　status           从服务器返回的数字代码，比如常见的404（未找到）和200（已就绪）
  　　status Text       伴随状态码的字符串信息
  　　readyState       对象状态值
　　　　0 (未初始化) 对象已建立，但是尚未初始化（尚未调用open方法）
　　　　1 (初始化) 对象已建立，尚未调用send方法
　　　　2 (发送数据) send方法已调用，但是当前的状态及http头未知
　　　　3 (数据传送中) 已接收部分数据，因为响应及http头不全，这时通过responseBody和responseText获取部分数据会出现错误，
　　　　4 (完成) 数据接收完毕,此时可以通过通过responseXml和responseText获取完整的回应数据
64、JS继承的实现方式
既然要实现继承，那么首先我们得有一个父类，代码如下：
// 定义一个动物类
function Animal (name) {
  // 属性
  this.name = name || 'Animal';
  // 实例方法
  this.sleep = function(){
    console.log(this.name + '正在睡觉！');
  }
}
// 原型方法
Animal.prototype.eat = function(food) {
  console.log(this.name + '正在吃：' + food);
};
1、原型链继承
核心： 将父类的实例作为子类的原型
function Cat(){ 
}
Cat.prototype = new Animal();
Cat.prototype.name = 'cat';

//　Test Code
var cat = new Cat();

2、构造继承
核心：使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）
function Cat(name){
  Animal.call(this);
  this.name = name || 'Tom';
}

3、实例继承
核心：为父类实例添加新特性，作为子类实例返回
function Cat(name){
  var instance = new Animal();
  instance.name = name || 'Tom';
  return instance;
}
4、拷贝继承
function Cat(name){
  var animal = new Animal();
  for(var p in animal){
    Cat.prototype[p] = animal[p];
  }
  // 2020年10月10日21点36分：感谢 @baclt 的指出，如下实现修改了原型对象，会导致单个实例修改name，会影响所有实例的name值
  // Cat.prototype.name = name || 'Tom'; 错误的语句，下一句为正确的实现
  this.name = name || 'Tom';
}

// Test Code
var cat = new Cat();
5、组合继承
核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用
function Cat(name){
  Animal.call(this);
  this.name = name || 'Tom';
}
Cat.prototype = new Animal();

// 感谢 @学无止境c 的提醒，组合继承也是需要修复构造函数指向的。

Cat.prototype.constructor = Cat;

// Test Code
var cat = new Cat();
65、http缓存头有哪些？ Expires、Cache-Control、Last-Modified等
在请求一个静态文件的时候（图片，css，js）等，这些文件的特点是文件不经常变化，将这些不经常变化的文件存储起来，对客户端来说是一个优化用户浏览体验的方法。那么这个就是客户端缓存的意义了。
1、Expires/Cache-Control
HTTP头中的Expires和Cache-Control就是完成这个事情的。
当客户端第一次访问资源的时候，服务端在返回资源内容的同时也返回了Expires: Sun, 16 Oct 2016 05:43:02 GMT。
服务端告诉浏览器： 你Y的先把这个文件给我缓存起来，在这个过期时间之前，这个文件都不会变化了，你下次需要这个文件的时候，你就不要过来找我要了，你就去缓存中拿就好了，又快又好。
2、Last-Modified/ If-Modify-since
客户端第一次访问资源的时候，服务端返回资源内容的同时返回了Last-Modifed:Wed, 07 Aug 2013 15:32:18 GMT 服务端在告诉客户端：你获取的这个文件我最后的修改时间是Wed, 07 Aug 2013 15:32:18 GMT 。浏览器在获取这个文件存到缓存中的时候，给缓存中的文件同时记录上这个最后修改时间。
第二次访问的时候（我们假设这里没有设置expires或者cache-control）。那么服务端访问资源的时候会带上If-Modify-since:Wed, 07 Aug 2013 15:32:18 GMT ；
客户端询问服务端：喂，我需要的这个资源其实我这边已经有缓存了，我的缓存文件的最后修改时间是这个是，如果你那边的资源在这个时间以后没有修改的话，你就告诉我一下就好了，不需要返回实际的资源内容。反之，要是你有修改的话，你就把文件内容返回给我吧。
服务端回应说：哦。行为是看下资源是否在这个时间后没有修改过，如果没有修改返回个304告诉客户端，我没有修改过。如果有变化了，我就返回200，并且带上资源内容。
3、ETag/ If-None-Match。
客户端第一次访问资源的时候，服务端返回资源内容的同时返回了Last-Modifed:Wed, 07 Aug 2013 15:32:18 GMT 服务端在告诉客户端：你获取的这个文件我最后的修改时间是Wed, 07 Aug 2013 15:32:18 GMT 。浏览器在获取这个文件存到缓存中的时候，给缓存中的文件同时记录上这个最后修改时间。
第二次访问的时候（我们假设这里没有设置expires或者cache-control）。那么服务端访问资源的时候会带上If-Modify-since:Wed, 07 Aug 2013 15:32:18 GMT ；
客户端询问服务端：喂，我需要的这个资源其实我这边已经有缓存了，我的缓存文件的最后修改时间是这个是，如果你那边的资源在这个时间以后没有修改的话，你就告诉我一下就好了，不需要返回实际的资源内容。反之，要是你有修改的话，你就把文件内容返回给我吧。
服务端回应说：哦。行为是看下资源是否在这个时间后没有修改过，如果没有修改返回个304告诉客户端，我没有修改过。如果有变化了，我就返回200，并且带上资源内容。
66、meta定义viewport ，手机h5与pc端的区别
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
手机默认的layout-viewport是多大呢，“layout viewport有多宽？每个浏览器都不一样，Safari iPhone为980px，Opera为850px，Android WebKit为800px，最后IE为974px。”
虽然viewport解决了我们的一些问题,但是它也为我们带来了一些遗留问题.
在HTML的head标签里加上 <meta name="viewport" content="width=device-width"> ，就告诉浏览器我是移动端页面，用的是移动端的设计，对于视口 viewport，我要把默认文档宽度 width （布局视口宽度）设置为逻辑像素宽度 device-width（视觉视口宽度、设备宽度、屏幕宽度）。
如果不加这个meta，那默认的文档宽度就是 980px 。
67、rem布局原理深度理解
物理像素、设备像素之间的差距导致不一致
2.1、em
　　em作为font-size的单位时，其代表父元素的字体大小，em作为其他属性单位时，代表自身字体大小——MDN
　　比如父元素font-size:12px;
　　自身元素如果写成：font-sise:2em;则自身元素用px表示就是24px（相对父元素字体大小）;
　　但是自身元素设置：width:2rem,那么自身元素用px表示就是48px（相对自身字体大小）；
       2.2、rem
　　rem作用于非根元素时，相对于根元素字体大小；rem作用于根元素字体大小时，相对于其出初始字体大小——MDN
　　比如根元素（html）设置font-size=12px; 非根元素设置width:2rem;则换成px表示就是24px；
　　如果根元素设置成font-size=1rem;则根元素换成px就是相对于初始字体大小，一般是12px；
68、MVC和MVVM的区别
  MVVM即Model-View-ViewModel的简写。即模型-视图-视图模型。模型（Model）指的是后端传递的数据。视图(View)指的是所看到的页面。视图模型(ViewModel)是mvvm模式的核心，它是连接view和model的桥梁。它有两个方向：一是将模型（Model）转化成视图(View)，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定。二是将视图(View)转化成模型(Model)，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听。这两个方向都实现的，我们称之为数据的双向绑定。
      MVC是Model-View- Controller的简写。即模型-视图-控制器。M和V指的意思和MVVM中的M和V意思一样。C即Controller指的是页面业务逻辑。使用MVC的目的就是将M和V的代码分离。MVC是单向通信。也就是View跟Model，必须通过Controller来承上启下。MVC和MVVM的区别并不是VM完全取代了C，只是在MVC的基础上增加了一层VM，只不过是弱化了C的概念，ViewModel存在目的在于抽离Controller中展示的业务逻辑，而不是替代Controller，其它视图操作业务等还是应该放在Controller中实现。也就是说MVVM实现的是业务逻辑组件的重用，使开发更高效，结构更清晰，增加代码的复用性。
 
Figure 1MVC
 
Figure 2MVVM
69、this指针
借助阮一峰老师的话：它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。这句话看似平常，可是要非常注意三个字：“运行时”，这说明this关键字只与函数的执行环境有关，而与声明环境没有关系。也就是这个this到底代表的是什么对象要等到函数运行时才知道，有点类似函数定义时的参数列表只在函数调用时才传入真正的对象。理解了这一点对后面this关键字规律的掌握有很大帮助。

     this关键字虽然会根据环境变化，但是它始终指向的是调用当前函数的那个对象。这就引出了JS中函数调用的问题。在JS中调用函数的模式可以分为4种：方法调用模式、函数调用模式、构造器调用模式、apply调用模式。这些模式在如何初始化关键参数this上存在差异。
70、web安全CSRF和XSS
CSRF
１、基本概念和缩写
CSRF（Cross-site request forgery）跨站请求伪造，是通过伪装成受信任用户的请求来利用受信任的网站进行攻击。
３、防御措施
　　　　CSRF是攻击者可以利用保存到cookie伪造用户发送请求，所以防御的关键是在请求中放入攻击者不可伪造的信息。
 
　　　　Token验证：在http请求的头信息中增加一个Token字段，并在服务器端判断是否Token一致，通过校验携带的Token信息决定是否允许请求。
　　　　Referer验证：　在HTTP头中有一个字段叫Referer，它记录了该HTTP请求的来源地址。如果Referer是可信任的网站来源，则允许，否则拒绝。（例如用户在登录某银行网站A.com后点击转账按钮发送转账请求，此时该请求的头信息的Referer就是有转账按钮的URL，服务器判断是否为银行网站的URL，是的话请求就合法，不是的话就可能是CSRF攻击，则拒绝请求。）
XSS
　　１、基本概念和缩写
　　XSS攻击全称跨站脚本攻击，XSS是一种在web应用中的计算机安全漏洞，它允许恶意web用户将代码植入到提供给其它用户使用的页面中。
３、防御措施
 　　　1、过滤：表单提交或者url参数传递前，对需要的参数进行过滤
　　　2、转码（例如md5）、3、转化：有时不能对数据进行严格的过滤，那我们也需要对标签进行转换。（比如用户输入：<script>alert("222")</script>，保存后最终存储的会是&lt;script&gt;alert=&quot;222;&lt;/script&gt;在展现时浏览器会对这些字符转换成文本内容显示，而不是一段可执行的代码。）
 71、js中事件流的理解
事件的概念：
　　HTML中与javascript交互是通过事件驱动来实现的，例如鼠标点击事件、页面的滚动事件onscroll等等，可以向文档或者文档中的元素添加事件侦听器来预订事件。
　　想要知道这些事件是在什么时候进行调用的，就需要了解一下“事件流”的概念。
什么是事件流：
　　1，DOM事件流，
　　　　事件流包括三个阶段：
　　　　1，事件捕获阶段。
　　　　2，处于目标阶段。（当前事件阶段）
　　　　3，事件冒泡阶段。
https://www.cnblogs.com/st-leslie/p/5907556.html
72、柯里化函数。
// 普通的add函数
function add(x, y) {
    return x + y
}
// Currying柯里化后
function curryingAdd(x) {
    return function (y) {
        return x + y
    }
}
add(1, 2)           // 3
curryingAdd(1)(2)   // 3
链接：
https://www.jianshu.com/p/2975c25e4d71
73、一次完整的HTTP请求过程
https://www.cnblogs.com/engeng/articles/5959335.html
74、居中为什么用transform，而不是margin top/left
transform
transform 属于合成属性（composite property），对合成属性进行 transition/animation 动画将会创建一个合成层（composite layer），这使得被动画元素在一个独立的层中进行动画。通常情况下，浏览器会将一个层的内容先绘制进一个位图中，然后再作为纹理（texture）上传到 GPU，只要该层的内容不发生改变，就没必要进行重绘（repaint），浏览器会通过重新复合（recomposite）来形成一个新的帧。
margin top / left
top/left属于布局属性，该属性的变化会导致重排（reflow/relayout），所谓重排即指对这些节点以及受这些节点影响的其它节点，进行CSS计算->布局->重绘过程，浏览器需要为整个层进行重绘并重新上传到 GPU，造成了极大的性能开销。
小总结
Margin：对布局属性进行动画，浏览器需要为每一帧进行重绘并上传到 GPU transform：对合成属性进行动画，浏览器会为元素创建一个独立的复合层，当元素内容没有发生改变，该层就不会被重绘，浏览器会通过重新复合来创建动画帧
75、visibility: hidden与display: none（类似vue中v-show与v-if）
visibility: hidden ---- 将元素隐藏，但是在网页中该占的位置还是占着。
display: none ---- 将元素的显示设为无，即在网页中不占任何的位置。
76、v-if、v-show、v-html的原理是什么？
v-if会调用addIfCondition方法，生成vnode的时候会忽略对应节点，render的时候就不会渲染；
v-show会生成vnode，render的时候也会渲染成真实节点，只是在render过程中会在节点的属性中修改show属性值，也就是常说的display；
v-html会先移除节点下的所有节点，调用html方法，通过addProp添加innerHTML属性，归根结底还是设置innerHTML为v-html的值
所以在使用v-html的时候可能会存在XSS攻击的漏洞，被植入可执行的脚本
77、vue核心面试题：组件中的data为什么是一个函数
1.vue中组件是用来复用的，为了防止data复用，将其定义为函数。
2.vue组件中的data数据都应该是相互隔离，互不影响的，组件每复用一次，data数据就应该被复制一次，之后，当某一处复用的地方组件内data数据被改变时，其他复用地方组件的data数据不受影响，就需要通过data函数返回一个对象作为组件的状态。
3.当我们将组件中的data写成一个函数，数据以函数返回值形式定义，这样每复用一次组件，就会返回一份新的data，拥有自己的作用域，类似于给每个组件实例创建一个私有的数据空间，让各个组件实例维护各自的数据。
4.当我们组件的date单纯的写成对象形式，这些实例用的是同一个构造函数，由于JavaScript的特性所导致，所有的组件实例共用了一个data，就会造成一个变了全都会变的结果。
78、vue中v-model与.sync修饰符的使用差异
https://blog.csdn.net/qq_36209248/article/details/104020954

两者的本质都是语法糖，目的都是实现组件与外部数据的双向绑定。v-model 是 .sync的一种体现（prop是value，vm.$emit('update:input')）。.sync 比较灵活，v-model比较单一。

v-model能在像单选框、复选框等类型的输入控件中实现双向绑定，但是如果它使用在一个组件上，就无法实现双向绑定，因为从它的本质上看，它就是绑定value值，监听input事件，通过event拿到新的value并赋值给value。

总的来说，v-model倾向于“value”，是组件最终的操作结果。.sync倾向于“change”，它是父组件获取子组件状态的一种快捷方式，否则我们很可能需要用事件来判断子组件状态。是一种update操作。
79、你了解vue中的diff算法吗？
1.	diff算法是虚拟DOM技术的产物，vue里面实际叫做patch，它的核心实现来自于snabbdom；通过新旧虚拟DOM作对比（即patch），将变化的地方转换为DOM操作
2.	在vue 1中是没有patch的，因为界面中每个依赖都有专门的watcher负责更新，这样项目规模变大就会成为性能瓶颈，vue 2中为了降低watcher粒度，每个组件只有一个watcher，但是当需要更新的时候，怎样才能精确找到发生变化的地方？这就需要引入patch才行。
3.	组件中数据发生变化时，对应的watcher会通知更新并执行其更新函数，它会执行渲染函数获取全新虚拟dom：newVnode，此时就会执行patch比对上次渲染结果oldVnode和新的渲染结果newVnode。
4.	patch过程遵循深度优先、同层比较的策略；两个节点之间比较时，如果它们拥有子节点，会先比较子节点；比较两组子节点时，会假设头尾节点可能相同先做尝试，没有找到相同节点后才按照通用方式遍历查找；查找结束再按情况处理剩下的节点；借助key通常可以非常精确找到相同节点，因此整个patch过程非常高效。
80、vue中组件之间的通信方式？
回答范例：
1.	组件通信方式大体有以下8种：
•	props
•	$emit/$on
•	$children/$parent
•	$attrs/$listeners
•	ref
•	$root
•	eventbus
•	vuex
2.	根据组件之间关系讨论组件通信最为清晰有效
•	父子组件
o	props
o	$emit/$on
o	$parent / $children
o	ref
o	$attrs / $listeners
•	兄弟组件
o	$parent
o	eventbus
o	vuex
•	跨层级关系
o	provide/inject
o	$root
o	eventbus
o	vuex
81、什么是vue-loader？
Vue-loader 是 Webpack 的加载器模块，它使我们可以用 .vue 文件格式编写单文件组件。单文件组件文件有三个部分，即模板、脚本和样式。 vue-loader 模块允许 webpack 使用单独的加载器模块（例如 SASS 或 SCSS 加载器）提取和处理每个部分。该设置使我们可以使用 .vue 文件无缝编写程序。
vue-loader 模块还允许把静态资源视为模块依赖性，并允许使用 webpack 加载器进行处理。而且还允许在开发过程中进行热重装。
82、什么是 mixin？
Mixins 使我们能够为 Vue 组件编写可插拔和可重用的功能。如果你希望在多个组件之间重用一组组件选项，例如生命周期 hook、方法等，则可以将其编写为 mixin，并在组件中简单地引用它。然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优先于组件自己的 hook 。
83、在开发过程中，如果你的 Vue 程序和后端 API 服务器未在同一主机上运行，该如何代理 API 请求。假设使用 Vue-CLI 3 进行设置？
假设我们有一个运行在 localhost:4040 上的 Node.js 后端服务器。为了确保代理并可以从组件中访问它，可以配置 vue.config.js 文件并包含 devServer 部分，如下所示：
在 vue.config.js 文件中：
module.exports: {
    devServer: {
        proxy: {
            '/api': { 
                target: ‘http://localhost:4040/api’, 
                changeOrigin: true 
            }
        }
    }
}
84、prop 如何指定其类型要求？
通过实现 prop 验证选项，可以为单个 prop 指定类型要求。这对生产没有影响，但是会在开发阶段发出警告，从而帮助开发人员识别传入数据和 prop 的特定类型要求的潜在问题。
配置三个 prop 的例子：
props: {
    accountNumber: {
        type: Number,
        required: true
    },
    name: {
        type: String,
        required: true
   },
   favoriteColors: Array
}
